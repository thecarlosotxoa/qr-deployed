# backend/routes/qr_routes.py

from flask import Blueprint, request, jsonify, session
import qrcode
import io
import base64
from datetime import datetime, timezone
from utils.db import get_db_connection  # Assuming db connection helper is in utils

qr_routes = Blueprint("qr", __name__)

# Generate QR code
@qr_routes.route("/generate-qr", methods=["POST"])
def generate_qr():
    """Endpoint to generate a QR code."""
    try:
        data = request.json.get("data")
        if not data:
            return jsonify({"error": "No data provided"}), 400

        # Generate QR code
        img = qrcode.make(data)
        img_buffer = io.BytesIO()
        img.save(img_buffer, format="PNG")
        img_str = base64.b64encode(img_buffer.getvalue()).decode("utf-8")

        return jsonify({"qr_code": img_str}), 200
    except Exception as e:
        return jsonify({"error": "An internal server error occurred"}), 500

# Get QR codes for the logged-in user
@qr_routes.route("/user/qr-codes", methods=["GET"])
def get_user_qr_codes():
    """Endpoint to get all QR codes generated by the logged-in user."""
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"error": "User not logged in"}), 403

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "SELECT id, qr_text, qr_image, timestamp FROM qr_codes WHERE user_id = %s ORDER BY timestamp DESC",
            (user_id,)
        )
        qr_codes = cur.fetchall()
        cur.close()
        conn.close()

        # Process qr_codes to convert 'qr_image' from memoryview to string
        for qr_code in qr_codes:
            # Convert 'qr_image' from memoryview to string
            qr_image_memoryview = qr_code['qr_image']
            if isinstance(qr_image_memoryview, memoryview):
                qr_image_bytes = qr_image_memoryview.tobytes()
                qr_image_str = qr_image_bytes.decode('utf-8')
                qr_code['qr_image'] = qr_image_str

            # Convert 'timestamp' to ISO format string with timezone info
            timestamp = qr_code['timestamp']
            if isinstance(timestamp, datetime):
                # Ensure the timestamp is timezone-aware
                if timestamp.tzinfo is None:
                    timestamp = timestamp.replace(tzinfo=timezone.utc)
                qr_code['timestamp'] = timestamp.isoformat()

        return jsonify(qr_codes), 200
    except Exception as e:
        return jsonify({"error": "An error occurred while fetching QR codes."}), 500

# Save QR code
@qr_routes.route('/user/save-qr', methods=['POST'])
def save_qr_code():
    """Endpoint to save a QR code for a logged-in user."""
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"error": "User not logged in"}), 403

    data = request.get_json()
    input_text = data.get('inputText')
    qr_image = data.get('qrImage')
    if not input_text or not qr_image:
        return jsonify({"error": "Missing inputText or qrImage"}), 400

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO qr_codes (user_id, qr_text, qr_image, timestamp) VALUES (%s, %s, %s, %s)",
            (user_id, input_text, qr_image, datetime.now(timezone.utc).replace(tzinfo=None)),
        )
        conn.commit()
        cur.close()
        conn.close()

        return jsonify({"message": "QR code saved successfully."}), 201
    except Exception as e:
        return jsonify({"error": "An error occurred while saving the QR code."}), 500

# Delete a QR code
@qr_routes.route('/user/delete-qr/<int:id>', methods=['DELETE'])
def delete_qr_code(id):
    """Endpoint to delete a QR code by its ID."""
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"error": "User not logged in"}), 403

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        # Ensure the QR code belongs to the logged-in user before deleting
        cur.execute("DELETE FROM qr_codes WHERE id = %s AND user_id = %s RETURNING id", (id, user_id))
        deleted_id = cur.fetchone()
        conn.commit()
        cur.close()
        conn.close()

        if deleted_id:
            return jsonify({"message": "QR code deleted successfully"}), 200
        else:
            return jsonify({"error": "QR code not found or does not belong to the user"}), 404
    except Exception as e:
        return jsonify({"error": "An error occurred while deleting the QR code"}), 500
